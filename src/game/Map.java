package game;

import static model.CellType.*;

import model.CellType;

import java.util.ArrayList;
import java.util.List;


public class Map {
    private final CellType[][] map;
    private final CellType[][] small = {
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, PACMAN, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, GHOST_EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK}
    };
    private final CellType[][] medium = {
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, PACMAN, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, GHOST_EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK}
    };
    private final CellType[][] random = {
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, PACMAN, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, GHOST_EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK}
    };
    private final CellType[][] big = {
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, PACMAN, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, GHOST_EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK}
    };
    private final CellType[][] huge = {
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, PACMAN, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, EDIBLE, BLOCK},
            {BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, EDIBLE, BLOCK, BLOCK, BLOCK, EDIBLE, BLOCK, BLOCK, EDIBLE, BLOCK},
            {BLOCK, GHOST_EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, EDIBLE, GHOST_EDIBLE, BLOCK},
            {BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK, BLOCK}
    };

    public Map(int size) {
        map = switch (size) {
            case 1 -> small;
            case 2 -> medium;
            case 3 -> random;
            case 4 -> big;
            case 5 -> huge;
            default -> throw new IllegalStateException("Unreachable...");
        };
    }

    public List<List<Integer>> getGhostPositions() {
        List<List<Integer>> offsets = new ArrayList<>();

        for (int i = 0; i < map.length; i++)
            for (int j = 0; j < map[i].length; j++)
                if (map[i][j] == GHOST_EDIBLE) {
                    int finalI = i;
                    int finalJ = j;
                    offsets.add(new ArrayList<>() {
                        {
                            add(finalI);
                            add(finalJ);
                        }
                    });
                }

        return offsets;
    }

    public CellType getPosition(int xPos, int yPos) {
        return map[yPos][xPos];
    }

    public void setPosition(int xPos, int yPos, CellType cellType) {
        map[yPos][xPos] = cellType;
    }

    public CellType[][] getMap() {
        return map;
    }

    public boolean hasFood() {
        for (CellType[] row : map)
            for (CellType cell : row)
                if (cell == EDIBLE || cell == GHOST_EDIBLE)
                    return true;

        return false;
    }
}